import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

class KlassBuilder {

  public Map<String, Klass> klassMap = new HashMap<>();

  public static enum RelationType {
    ASSOCIATION, DASSOCIATION, AGGREGATION, DAGGREGATION, DECOMPOSITION, DDECOMPOSITION, DEPENDENCY, DDEPENDENCY
  }

  public static enum AccessModifyer {
    PUBLIC("+"),
    PRIVATE("-"),
    PROTECTED("#"),
    DEFAULT("");

    private final String nType;

    AccessModifyer(String type) {

      this.nType = type;
    }

    public String getType() {
      return this.nType;
    }
  }

  public static class Modifyers {
    public boolean isStatic;
    public AccessModifyer access;
    public Modifyers(){
      isStatic = false;
      access = KlassBuilder.AccessModifyer.DEFAULT;
    }
  }


  public static class Klass {

    public ArrayList<Attribute> attributesL;
    public ArrayList<Method> methodsL;
    public ArrayList<String> extendsL; //key for the KlassMap
    public ArrayList<String> implementsL; //key for the KlassMap
    public String name;

    public Klass(String n) {
      this.name = n;
      methodsL = new ArrayList<>();
      extendsL = new ArrayList<>();
      implementsL = new ArrayList<>();
    }

    public void addAttribute(Attribute a) {
      this.attributesL.add(a);
    }

    public void addMethod(Method m) {
      this.methodsL.add(m);
    }

    public void addExtends(String klassKey) {
      this.extendsL.add(klassKey);
    }

    public void addImplements(String klassKey) {
      this.implementsL.add(klassKey);
    }
  }

  public static class Paramether {

    public String name;
    public String type;

    public Paramether(String n, String t) {
      this.name = n;
      this.type = t;
    }
  }

  public static class Method {

    public String name;
    public String returnType;
    public AccessModifyer modifyer;
    public boolean isStatic;
    public ArrayList<Paramether> paramethers;

    void addParamether(Paramether p) {
      paramethers.add(p);
    }

    public Method(String n, String r, AccessModifyer m, boolean s) {
      this.name = n;
      this.returnType = r;
      this.modifyer = m;
      this.isStatic = s;
      paramethers = new ArrayList<>();
    }
  }

  public static class Attribute {

    public String name;
    public String returnType;
    public AccessModifyer modifyer;
    public boolean isStatic;

    public Attribute(String n, String r, AccessModifyer m, boolean s) {
      this.name = n;
      this.returnType = r;
      this.modifyer = m;
      this.isStatic = s;
    }
  }
}

COMPILER JTD2DOT

KlassBuilder builder = new KlassBuilder();

CHARACTERS

lowerletter = 'a'..'z'.
upperletter = 'A'..'Z'.
numberchar = '0'..'9'.

TOKENS

lowerword_c = lowerletter{upperletter|lowerletter}.
upperword_c = upperletter{upperletter|lowerletter}.
number_c = numberchar{numberchar}.

COMMENTS FROM "/*" TO "*/"

IGNORE '\n'+'\t'

PRODUCTIONS

JTD2DOT = Definition{Definition}.

// Definitions
Definition = ClassDefinition | InterfaceDefinition.
ClassDefinition = "class" ClassName (. KlassBuilder.Klass clazz = builder.klassMap.put(t.val, null); .) ["extends" ClassName{"," ClassName}] ["implements" ClassName{"," ClassName}]"{" {ClassEntity} "}".
InterfaceDefinition = "interface" ClassName ["extends" ClassName]"{" {InterfaceEntity} "}".

// Super Entities
ClassEntity<> = [Modifyers<out KlassBuilder.Modifyers modifyer>] Especializer.
InterfaceEntity = [Modifyers<out KlassBuilder.Modifyers modifyer>] (CanonicalType|VoidType) EntityName MethodInterfaceCompletition.

// Especializers
Especializer = FunctionEspecializer | AnomalousEspecializer.
FunctionEspecializer = VoidType EntityName MethodCompletition.
AnomalousEspecializer = CanonicalType EntityName (MethodCompletition | AttributeCompletition).

// Methods and Attributes
MethodInterfaceCompletition = "("[CanonicalType EntityName {"," CanonicalType EntityName}] ")" ";".
MethodCompletition = "("[CanonicalType EntityName {"," CanonicalType EntityName}] ")" "{" "}" [";"].
AttributeCompletition = [Relation] ";".

// Fetched Entities
CanonicalType = (UpperName | LowerName) [ArrayOperator].
VoidType = "void".
ClassName = UpperName.
EntityName = (UpperName|LowerName).
ArrayOperator = "[" [Number] "]".
Relation = RelationType<out KlassBuilder.RelationType type> "@" Multiplicity "to" Multiplicity.

// Generic Rules
Modifyers <out KlassBuilder.Modifyers modifyer_out> (. modifyer_out = new KlassBuilder.Modifyers(); .) =
AccessModifyer<out KlassBuilder.AccessModifyer modifyer> (. modifyer_out.access = modifyer; .) [ScopeModifyer<out boolean isStatic> (. modifyer_out.isStatic = isStatic; .)]
| ScopeModifyer<out boolean isStatic> (. modifyer_out.isStatic = isStatic; .) [ AccessModifyer<out KlassBuilder.AccessModifyer modifyer> (. modifyer_out.access = modifyer; .) ].

UpperName = upperword_c.
LowerName = lowerword_c.
Number = number_c.

AccessModifyer<out KlassBuilder.AccessModifyer modifyer_out> (. modifyer_out = null; .) =
"public" (. modifyer_out = KlassBuilder.AccessModifyer.PUBLIC; .)
|"protected" (. modifyer_out = KlassBuilder.AccessModifyer.PROTECTED; .)
|"private" (. modifyer_out = KlassBuilder.AccessModifyer.PRIVATE; .).

ScopeModifyer<out boolean isStatic_out> = "static" (. isStatic_out = true; .).

RelationType<out KlassBuilder.RelationType type_out> (. type_out = null; .) =
"association" (. type_out = KlassBuilder.RelationType.ASSOCIATION; .)
|"dassociation"(. type_out = KlassBuilder.RelationType.DASSOCIATION; .)
|"aggregation"(. type_out = KlassBuilder.RelationType.AGGREGATION; .)
|"daggregation"(. type_out = KlassBuilder.RelationType.DAGGREGATION; .)
|"decomposition"(. type_out = KlassBuilder.RelationType.DECOMPOSITION; .)
|"ddecomposition"(. type_out = KlassBuilder.RelationType.DDECOMPOSITION; .)
|"dependency"(. type_out = KlassBuilder.RelationType.DEPENDENCY; .)
|"ddependency"(. type_out = KlassBuilder.RelationType.DDEPENDENCY; .).


END JTD2DOT.
